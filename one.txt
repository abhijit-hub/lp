import pandas as pd
import numpy as np
import matplotlib.pyplot as plt  

boston = pd.read_csv("BostonHousing.csv")
boston

boston.shape

df= pd.DataFrame(boston)
df.columns = boston.columns
df.columns

df.head

boston["medv"].shape

df['price'] = boston["medv"]
df['price']
df

df.head()
df = df.drop(["medv"], axis=1)

df.tail()

x = boston
y = boston["medv"]

x = x.drop(["medv"], axis=1)
x

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain, ytest = train_test_split(x,y,test_size=0.2, random_state= 42)
print('xtrain shape:', xtrain.shape)
print('xtest shape:', xtest.shape)
print('ytrain shape:', ytrain. shape)
print('ytest shape:', ytest.shape)


from sklearn.linear_model import LinearRegression
lr= LinearRegression()

lr.fit(xtrain, ytrain)
y_pred = lr.predict(xtest)

plt.scatter(ytest,y_pred, c = 'green')
plt.xlabel("Price:in 1000's")
plt.ylabel("Predicted Value")
plt.title("true Values vs Predicted Values:Linear Regression")
plt.show()

from sklearn.metrics import mean_squared_error, mean_absolute_error
mse = mean_squared_error(ytest, y_pred)
mae = mean_absolute_error(ytest, y_pred)
print("MSE",mse)
print("MAE",mae)

pip install tensorflow

import tensorflow as tf


model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation = "relu", input_shape = (xtrain.shape[1],)),
    tf.keras.layers.Dense(32, activation = "relu"),
    tf.keras.layers.Dense(32, activation = "relu"),
    tf.keras.layers.Dense(16, activation = "relu"),
    tf.keras.layers.Dense(16, activation = "relu"),
    tf.keras.layers.Dense(16, activation = "relu"),
    tf.keras.layers.Dense(16, activation = "relu"),
    tf.keras.layers.Dense(4, activation = "relu"),
    tf.keras.layers.Dense(4, activation = "relu"),
    tf.keras.layers.Dense(4, activation = "relu"),
    tf.keras.layers.Dense(4, activation = "relu"),
    tf.keras.layers.Dense(1)
])

#compile the model
# model.compile(optimize = "adam", loss = "mean_squared_error")
model.compile(
        optimizer="adam", loss="mean_squared_error",
    )

#training the model
model.fit(xtrain, ytrain, epochs = 100, batch_size = 32, validation_data = (xtest, ytest))

#evaluate the model
loss = model.evaluate(xtest, ytest)
print(f"MSE of test data = {loss}")